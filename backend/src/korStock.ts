import axios from "axios";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";
import pool from "./config/db"; // ‚úÖ DB Ïó∞Í≤∞

dotenv.config();

let accessToken = "";

interface TokenResponse {
  access_token: string;
}

interface StockItem {
  symbol: string;
  name: string;
  market: string;
}

const stockListPath = path.join(__dirname, "../krx_basic_info.json");
const stockList: StockItem[] = JSON.parse(fs.readFileSync(stockListPath, "utf-8"));

// ‚úÖ ACCESS TOKEN Î∞úÍ∏â
async function getAccessToken() {
  const url = "https://openapi.koreainvestment.com:9443/oauth2/tokenP";
  const headers = { "Content-Type": "application/json" };
  const body = {
    grant_type: "client_credentials",
    appkey: process.env.APP_KEY,
    appsecret: process.env.APP_SECRET,
  };

  try {
    const res = await axios.post<TokenResponse>(url, body, { headers });
    accessToken = res.data.access_token;
    console.log("‚úÖ [Ïã§Ï†Ñ] ACCESS_TOKEN Î∞úÍ∏â ÏÑ±Í≥µ");
  } catch (err) {
    console.error("‚ùå [Ïã§Ï†Ñ] ACCESS_TOKEN Î∞úÍ∏â Ïã§Ìå®", err);
  }
}

// ‚úÖ Îã®Ïùº Ï¢ÖÎ™© ÏãúÏÑ∏ Ï°∞Ìöå
async function fetchFullPriceInfo(symbol: string): Promise<{
  symbol: string;
  price: number | null;
  prevPrice: number | null;
  marketCap: number | null;
}> {
  const url =
    "https://openapi.koreainvestment.com:9443/uapi/domestic-stock/v1/quotations/inquire-price";
  const headers = {
    "Content-Type": "application/json",
    authorization: `Bearer ${accessToken}`,
    appkey: process.env.APP_KEY!,
    appsecret: process.env.APP_SECRET!,
    tr_id: "FHKST01010100",
  };
  const params = {
    fid_cond_mrkt_div_code: "J",
    fid_input_iscd: symbol,
  };

  try {
    const res = await axios.get<{ output: any }>(url, { headers, params });
    const output = res.data.output;

    const price = Number(output?.stck_prpr);
    const diff = Number(output?.prdy_vrss);
    const shares = Number(output?.lstn_stcn);

    const prevPrice = !isNaN(price) && !isNaN(diff) ? price - diff : null;
    const marketCap = !isNaN(price) && !isNaN(shares) ? price * shares : null;

    return { symbol, price, prevPrice, marketCap };
  } catch (err: any) {
    console.error(`‚ùå ${symbol} Ï°∞Ìöå Ïã§Ìå®:`, err?.response?.data || err.message);
    return { symbol, price: null, prevPrice: null, marketCap: null };
  }
}

// ‚úÖ DB Ï†ÄÏû• - Í∞ÄÍ≤© Ï∞®Ïù¥ ÎßêÍ≥† Îì±ÎùΩÎ•†(rate) Ï†ÄÏû•
async function saveToAssetInfo({
  symbol,
  name,
  price,
  rate,
  marketCap,
}: {
  symbol: string;
  name: string;
  price: number;
  rate: number; // ‚úÖ ÌçºÏÑºÌä∏ Í∞í
  marketCap: number;
}) {
  try {
    const [rows]: any = await pool.query("SELECT id FROM assets WHERE symbol = ?", [symbol]);
    if (!rows.length) {
      console.warn(`‚ö†Ô∏è ${symbol} (${name}) ‚Üí ÏûêÏÇ∞ Ï†ïÎ≥¥ ÏóÜÏùå`);
      return;
    }

    const assetId = rows[0].id;

    await pool.execute(
      `INSERT INTO asset_info 
        (asset_id, current_price, price_change, market_cap, last_updated, symbol) 
       VALUES (?, ?, ?, ?, NOW(), ?)
       ON DUPLICATE KEY UPDATE
         current_price = VALUES(current_price),
         price_change = VALUES(price_change),
         market_cap = VALUES(market_cap),
         last_updated = NOW()`,
      [assetId, price, rate, marketCap, symbol], // ‚úÖ rate Ï†ÄÏû•
    );

    return true;
  } catch (err) {
    console.error(`‚ùå DB Ï†ÄÏû• Ïã§Ìå®: ${symbol}`, err);
    return false;
  }
}

// ‚úÖ Ïä¨Î¶Ω Ìï®Ïàò
function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// ‚úÖ Ï†ÑÏ≤¥ Ïã§Ìñâ
export async function emitStockPrices(io: any) {
  console.log("üü° emitStockPrices Ïã§ÌñâÎê®");

  if (!accessToken) {
    console.log("üü° ACCESS_TOKEN ÏóÜÏùå ‚Üí Î∞úÍ∏â ÏãúÎèÑ");
    await getAccessToken();
    if (!accessToken) {
      console.error("‚ùå ACCESS_TOKEN Î∞úÍ∏â Ïã§Ìå® ‚Üí emit Ï§ëÎã®");
      return;
    }
  }

  const targetStocks = stockList.filter(
    (stock) => stock.market === "KOSPI" || stock.market === "KOSDAQ",
  );
  const chunkSize = 30;
  let successCount = 0;
  let failCount = 0;
  let successLogShown = false;
  let failLogShown = false;

  for (let i = 0; i < targetStocks.length; i += chunkSize) {
    const chunk = targetStocks.slice(i, i + chunkSize);

    const results = await Promise.all(chunk.map((stock) => fetchFullPriceInfo(stock.symbol)));

    for (const { symbol, price, prevPrice, marketCap } of results) {
      const stock = chunk.find((s) => s.symbol === symbol);
      const name = stock?.name || "Ïïå Ïàò ÏóÜÏùå";

      if (price !== null && prevPrice !== null && marketCap !== null) {
        const diff = price - prevPrice;
        const rate = (diff / prevPrice) * 100; // ‚úÖ ÌçºÏÑºÌä∏ Í≥ÑÏÇ∞
        const arrow = diff > 0 ? "üî∫" : diff < 0 ? "üîª" : "‚è∏Ô∏è";

        io.emit("stockPrice", {
          symbol,
          name,
          price,
          prevPrice,
          diff,
          rate: rate.toFixed(2), // ÏÜåÏàòÏ†ê ÎëòÏß∏ ÏûêÎ¶¨ÍπåÏßÄ
          marketCap,
        });

        const saved = await saveToAssetInfo({
          symbol,
          name,
          price,
          rate, // ‚úÖ Ï†ÄÏû•
          marketCap,
        });

        if (saved) {
          successCount++;
          if (!successLogShown) {
            console.log(
              `${arrow} ${name} (${symbol}) ÌòÑÏû¨Í∞Ä: ${price} | Ï†ÑÏùºÎåÄÎπÑ: ${rate.toFixed(2)}% | ÏãúÏ¥ù: ${marketCap}`,
            );
            successLogShown = true;
          }
        } else {
          failCount++;
          if (!failLogShown) {
            console.warn(`‚ö†Ô∏è ${name} (${symbol}) DB Ï†ÄÏû• Ïã§Ìå®`);
            failLogShown = true;
          }
        }
      } else {
        failCount++;
        if (!failLogShown) {
          console.warn(`‚ö†Ô∏è ${name} (${symbol}) Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå®`);
          failLogShown = true;
        }
      }
    }

    if (i + chunkSize < targetStocks.length) {
      await sleep(2000); // üí§ Í≥ºÎ∂ÄÌïò Î∞©ÏßÄ
    }
  }

  console.log(`‚úÖ ÏôÑÎ£å: ÏÑ±Í≥µ ${successCount}Í∞ú / Ïã§Ìå® ${failCount}Í∞ú`);
}
